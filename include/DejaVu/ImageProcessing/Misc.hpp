#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file
/// \brief General purpose image processing functions.
/// \author Reiex
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <DejaVu/types.hpp>

namespace djv
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \addtogroup ImageProcessing
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	namespace kernels
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \addtogroup kernels
		/// \ingroup ImageProcessing
		/// \{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns a reference to the convolution kernels for the Sobel gradient.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		const std::array<scp::Mat<float>, 2>& sobel();
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns a reference to the convolution kernels for the Prewitt gradient.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		const std::array<scp::Mat<float>, 2>& prewitt();
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Compute and returns the convolution kernels containing the derivatives of a Gaussian.
		/// 
		/// `patchSize` defines the size of the kernel computed (the final matrix size will be `2*patchSize + 1`.
		/// If `patchSize` is 0, then an adequate patchSize is automatically computed.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		std::array<scp::Mat<float>, 2> derivativeOfGaussian(float sigma = 1.f, uint64_t patchSize = 0);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Compute and returns the convolution kernel containing the laplacian of a Gaussian.
		/// 
		/// `patchSize` defines the size of the kernel computed (the final matrix size will be `2*patchSize + 1`.
		/// If `patchSize` is 0, then an adequate patchSize is automatically computed.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		scp::Mat<float> laplacianOfGaussian(float sigma = 1.4f, uint64_t patchSize = 0);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Compute and returns the convolution kernel containing a Gaussian.
		/// 
		/// `patchSize` defines the size of the kernel computed (the final matrix size will be `2*patchSize + 1`.
		/// If `patchSize` is 0, then an adequate patchSize is automatically computed.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		scp::Mat<float> gaussian(float sigma = 1.f, uint64_t patchSize = 0);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}

	namespace operators
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \addtogroup operators
		/// \ingroup ImageProcessing
		/// \{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the Sobel gradient of a matrix.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		std::array<scp::Mat<float>, 2> sobel(const scp::Mat<float>& m);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the Prewitt gradient of a matrix.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		std::array<scp::Mat<float>, 2> prewitt(const scp::Mat<float>& m);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns an approximation of the convolution of a derivative of Gaussian kernel with the matrix.
		/// 
		/// This approximation is obtained by computing the convolution of the blurred matrix with a derivation kernel
		/// of the form `(1 0 1)`.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		std::array<scp::Mat<float>, 2> derivativeOfGaussian(const scp::Mat<float>& m, float sigma = 1.f);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns an approximation of the convolution of a laplcian of Gaussian kernel with the matrix.
		/// 
		/// This approximation is obtained by computing the convolution of the blurred matrix with a simple laplacian
		/// kernel.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		scp::Mat<float> laplacianOfGaussian(const scp::Mat<float>& m, float sigma = 1.f);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Returns the blurred matrix.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		scp::Mat<float> gaussianBlur(const scp::Mat<float>& m, float sigma = 1.f);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
}
