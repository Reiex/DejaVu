#pragma once

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file
/// \brief Functions and classes for image segmentation.
/// \author Reiex
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <DejaVu/types.hpp>

namespace djv
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \addtogroup ImageProcessing
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	namespace segmentation
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \addtogroup segmentation
		/// \ingroup ImageProcessing
		/// \{
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief Struct for representing an image segmentation.
		/// 
		/// An image segmented is defined by its pixels belonging to a group of pixels. These groups have properties
		/// in common (here, a color and a position) and are identified by an index.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		struct ImageSegmentation
		{
			ImageSegmentation(uint64_t w, uint64_t h, uint64_t k);

			scp::Mat<uint64_t> groups;       ///< Matrix of the size of the image containing, for each pixel, the index of its group.
			std::vector<Color> groupColors;  ///< Vector containing, for each group, the color associated.
			std::vector<Point> groupPos;     ///< Vector containing, for each group, the position associated.
		};

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief K-Means segmentation algorithm. Regroups pixels in `k` groups based on their color.
		/// 
		/// The `groupPos` member in the segmentation returned contains only `(0, 0)` positions.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		ImageSegmentation kMeans(const Img& m, uint64_t k, float epsilon = 0.f);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \brief SLIC segmentation algorithm. Regroups pixels in `k` groups based on their color and position.
		/// 
		/// The importance of position in the belonging to a group is indicated by `m`: The higher `m`, the nearer two
		/// pixels of similar but different colors must be to be in the same group.
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		ImageSegmentation slic(const Img& im, uint64_t k, float m = 40.f, float epsilon = 0.f);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
}
